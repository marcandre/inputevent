{"version":3,"sources":["inputevent.min.js","/source/inputevent.js","/source/src/inputevent.js"],"names":["global","factory","exports","module","require","define","amd","inputevent","$","undefined","InputEvent","_this","this","globals","window","extend","inputsToCheck","isNativeEvent","evt","originalEvent","isTrusted","fakeInputEvent","target","trigger","misbehaves","behavesOk","document","on","data","selector","off","install","inputEventPatched","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","Symbol","iterator","next","done","value","err","uninstall"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,ACAA,cAPA,SAAWA,EAAQC,GACE,gBAAZC,UAA0C,mBAAXC,QAAyBA,OAAOD,QAAUD,EAAQG,QAAQ,WAC9E,kBAAXC,SAAyBA,OAAOC,IAAMD,QAAQ,UAAWJ,GAChED,EAAOO,WAAaN,EAAQD,EAAOQ,IACpCC,OAAO,SAAUD,GCFlB,QAASE,KFaL,GAAIC,GAAQC,KEZVC,EAAUC,QAAUd,MAIxBQ,GAAEO,OAAOH,MAEPI,eAAgB,SAAU,yBAA0B,uBAGpDC,cAAe,SAAAC,GACb,MAAOA,GAAIC,eAAiBD,EAAIC,cAAcC,aAAc,GAG9DC,eAAgB,SAAAH,GACVP,EAAKM,cAAcC,IACrBV,EAAEU,EAAII,QAAQC,QAAQ,UAI1BC,WAAY,SAAAN,GACNP,EAAKM,cAAcC,KACrBP,EAAKc,UAAUP,GACfV,EAAEkB,UACCC,GAAG,oBAAqBT,EAAIU,KAAKC,SAAUlB,EAAKU,gBACnDV,EAAKU,eAAeH,KAIxBO,UAAW,SAAAP,GACLP,EAAKM,cAAcC,IACrBV,EAAEkB,UACCI,IAAI,mBAAoBZ,EAAIU,KAAKC,SAAUlB,EAAKc,WAChDK,IAAI,oBAAqBZ,EAAIU,KAAKC,SAAUlB,EAAKa,aAKxDO,QAAS,WACP,IAAIlB,EAAQmB,kBAAZ,CAGAnB,EAAQmB,kBAAoB,CFa1B,IAAIC,IAA4B,EAC5BC,GAAoB,EACpBC,EAAiB1B,MAErB,KEhBF,IAAA,GAA0B2B,GAA1BC,EAAqB1B,EAAKK,cAAAsB,OAAAC,cAAAN,GAAAG,EAAAC,EAAAG,QAAAC,MAAAR,GAAA,EAAe,CFkBnC,GElBGJ,GAAAO,EAAAM,KACPlC,GAAEkB,UACCC,GAAG,mBAAoBE,GAAWA,SAAAA,GAAWlB,EAAKc,WAClDE,GAAG,oBAAqBE,GAAWA,SAAAA,GAAWlB,EAAKa,aFmBpD,MAAOmB,GACPT,GAAoB,EACpBC,EAAiBQ,EACjB,QACA,KACOV,GAA6BI,EAAU,WAC1CA,EAAU,YAEZ,QACA,GAAIH,EACF,KAAMC,OEzBhBS,UAAW,iBACF/B,GAAQmB,kBACfxB,EAAEkB,UAAUI,IAAI,kBAtDtB,GAAAvB,GA4De,GAAIG,EDMjB,OAAOH","file":"inputevent.min.js","sourcesContent":["/**\n * inputevent - Alleviate browser bugs for input events\n * https://github.com/marcandre/inputevent\n * @version v0.0.1 - (built Tue, Apr 12th 2016, 4:31 pm)\n * @author Marc-Andre Lafortune <github@marc-andre.ca>\n * @license MIT\n */\n'use strict';\n\n(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('jquery')) : typeof define === 'function' && define.amd ? define(['jquery'], factory) : global.inputevent = factory(global.$);\n})(undefined, function ($) {\n  'use strict';\n\n  function InputEvent() {\n    var _this = this;\n\n    var globals = window || global;\n\n    // Slightly odd way to have the object constructed have method force bound.\n    // Used to test duplicate library\n    $.extend(this, {\n\n      inputsToCheck: ['select', 'input[type=\"checkbox\"]', 'input[type=\"radio\"]'],\n\n      // For browsers that do not support isTrusted, assumes event is native.\n      isNativeEvent: function isNativeEvent(evt) {\n        return evt.originalEvent && evt.originalEvent.isTrusted !== false;\n      },\n\n      fakeInputEvent: function fakeInputEvent(evt) {\n        if (_this.isNativeEvent(evt)) {\n          $(evt.target).trigger('input');\n        }\n      },\n\n      misbehaves: function misbehaves(evt) {\n        if (_this.isNativeEvent(evt)) {\n          _this.behavesOk(evt);\n          $(document).on('change.inputevent', evt.data.selector, _this.fakeInputEvent);\n          _this.fakeInputEvent(evt);\n        }\n      },\n\n      behavesOk: function behavesOk(evt) {\n        if (_this.isNativeEvent(evt)) {\n          $(document) // Simply unbinds the testing handler\n          .off('input.inputevent', evt.data.selector, _this.behavesOk).off('change.inputevent', evt.data.selector, _this.misbehaves);\n        }\n      },\n\n      // Bind the testing handlers\n      install: function install() {\n        if (globals.inputEventPatched) {\n          return;\n        }\n        globals.inputEventPatched = 1;\n        var _iteratorNormalCompletion = true;\n        var _didIteratorError = false;\n        var _iteratorError = undefined;\n\n        try {\n          for (var _iterator = _this.inputsToCheck[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n            var selector = _step.value;\n\n            $(document).on('input.inputevent', selector, { selector: selector }, _this.behavesOk).on('change.inputevent', selector, { selector: selector }, _this.misbehaves);\n          }\n        } catch (err) {\n          _didIteratorError = true;\n          _iteratorError = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion && _iterator['return']) {\n              _iterator['return']();\n            }\n          } finally {\n            if (_didIteratorError) {\n              throw _iteratorError;\n            }\n          }\n        }\n      },\n\n      uninstall: function uninstall() {\n        delete globals.inputEventPatched;\n        $(document).off('.inputevent');\n      }\n\n    });\n  };\n\n  var inputevent = new InputEvent();\n\n  return inputevent;\n});\n//# sourceMappingURL=inputevent.js.map\n","(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('jquery')) :\n  typeof define === 'function' && define.amd ? define(['jquery'], factory) :\n  global.inputevent = factory(global.$)\n}(this, function ($) { 'use strict';\n\n  function InputEvent() {\n    let globals = window || global;\n\n    // Slightly odd way to have the object constructed have method force bound.\n    // Used to test duplicate library\n    $.extend(this, {\n\n      inputsToCheck: ['select', 'input[type=\"checkbox\"]', 'input[type=\"radio\"]'],\n\n      // For browsers that do not support isTrusted, assumes event is native.\n      isNativeEvent: evt => {\n        return evt.originalEvent && evt.originalEvent.isTrusted !== false;\n      },\n\n      fakeInputEvent: evt => {\n        if (this.isNativeEvent(evt)) {\n          $(evt.target).trigger('input');\n        }\n      },\n\n      misbehaves: evt => {\n        if (this.isNativeEvent(evt)) {\n          this.behavesOk(evt);\n          $(document)\n            .on('change.inputevent', evt.data.selector, this.fakeInputEvent);\n          this.fakeInputEvent(evt);\n        }\n      },\n\n      behavesOk: evt => {\n        if (this.isNativeEvent(evt)) {\n          $(document) // Simply unbinds the testing handler\n            .off('input.inputevent', evt.data.selector, this.behavesOk)\n            .off('change.inputevent', evt.data.selector, this.misbehaves);\n        }\n      },\n\n      // Bind the testing handlers\n      install: () => {\n        if (globals.inputEventPatched) {\n          return;\n        }\n        globals.inputEventPatched = 1;\n        for (var selector of this.inputsToCheck) {\n          $(document)\n            .on('input.inputevent', selector, {selector}, this.behavesOk)\n            .on('change.inputevent', selector, {selector}, this.misbehaves);\n        }\n      },\n\n      uninstall: () => {\n        delete globals.inputEventPatched;\n        $(document).off('.inputevent');\n      }\n\n    });\n  };\n\n  var inputevent = new InputEvent();\n\n  return inputevent;\n\n}));\n","import $ from 'jquery';\n\nfunction InputEvent() {\n  let globals = window || global;\n\n  // Slightly odd way to have the object constructed have method force bound.\n  // Used to test duplicate library\n  $.extend(this, {\n\n    inputsToCheck: ['select', 'input[type=\"checkbox\"]', 'input[type=\"radio\"]'],\n\n    // For browsers that do not support isTrusted, assumes event is native.\n    isNativeEvent: evt => {\n      return evt.originalEvent && evt.originalEvent.isTrusted !== false;\n    },\n\n    fakeInputEvent: evt => {\n      if (this.isNativeEvent(evt)) {\n        $(evt.target).trigger('input');\n      }\n    },\n\n    misbehaves: evt => {\n      if (this.isNativeEvent(evt)) {\n        this.behavesOk(evt);\n        $(document)\n          .on('change.inputevent', evt.data.selector, this.fakeInputEvent);\n        this.fakeInputEvent(evt);\n      }\n    },\n\n    behavesOk: evt => {\n      if (this.isNativeEvent(evt)) {\n        $(document) // Simply unbinds the testing handler\n          .off('input.inputevent', evt.data.selector, this.behavesOk)\n          .off('change.inputevent', evt.data.selector, this.misbehaves);\n      }\n    },\n\n    // Bind the testing handlers\n    install: () => {\n      if (globals.inputEventPatched) {\n        return;\n      }\n      globals.inputEventPatched = 1;\n      for (var selector of this.inputsToCheck) {\n        $(document)\n          .on('input.inputevent', selector, {selector}, this.behavesOk)\n          .on('change.inputevent', selector, {selector}, this.misbehaves);\n      }\n    },\n\n    uninstall: () => {\n      delete globals.inputEventPatched;\n      $(document).off('.inputevent');\n    }\n\n  });\n};\n\nexport default new InputEvent();\n"],"sourceRoot":"/source/"}